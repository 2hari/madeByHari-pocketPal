generator client {
  provider = "prisma-client-js"
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "./migrations"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                         String          @id @db.Uuid
  email                      String
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  currency                   String          @default("INR")
  locale                     String          @default("en")
  expenses                   expenses[]
  income                     income[]
  investments                investments[]
}

model income {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model expenses {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  paid_via   String   @default("")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model investments {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  /// @encrypted
  units      String   @default("0")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

